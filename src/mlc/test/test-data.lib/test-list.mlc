|============================================== #uT5ygENY.oxoMVaSz.GBpsWQzM
|	Require #QpZfH-Lc.JKOInzrw.hGai0lc1 (data.lib)

singleton := cons (1, nil).
doubleton := cons (#blt, cons (#pbj, nil)).
fruits := cons (#apple, cons (#banana, cons (#cherry, cons (#durian,
	cons (#eggplant, cons (#fig, cons (#grapefruit, nil))))))).

Echo "List constants".
singleton.
doubleton.
fruits.

Echo "Testing basic list length".
basic-length (nil).
basic-length (singleton).
basic-length (doubleton).
basic-length (fruits).

Echo "Testing list fold".
fold-noop := [state, elem. state].
fold (fold-noop, #pass, nil).
fold (fold-noop, #pass, singleton).
fold (fold-noop, #pass, doubleton).
fold (fold-noop, #pass, fruits).

fold-last := [state, elem. elem].
fold (fold-last, #pass, nil).
fold (fold-last, #fail, singleton).
fold (fold-last, #fail, doubleton).
fold (fold-last, #fail, fruits).

|* Basic unfold tests are done via tests for makelist and iota, which are
|* about as elementary as an unfold can get.

Echo "Testing list length".
length ([]).
length (singleton).
length (doubleton).
length (fruits).

Echo "Testing list reverse".
reverse ([]).
reverse (singleton).
reverse (doubleton).
reverse (fruits).

Echo "Testing makelist".
makelist (0, #X).
makelist (1, #Y).
makelist (2, #Z).
makelist (5, #W).
makelist (10, []).
makelist (15, [x. x]).

Echo "Testing iota".
iota (0).
iota (1).
iota (5).

Echo "Testing append".
append (nil, nil).
append (singleton, nil).
append (nil, singleton).
append (singleton, singleton).
append (nil, fruits).
append (fruits, nil).
append (fruits, fruits).
append (50; iota, 50; iota); length.

Echo "Testing map".
id := [x. x].
map (id, nil).
map (id, singleton).
map (id, doubleton).
map (id, fruits).
incr := [n. n + 1].
map (incr, nil).
map (incr, iota (8)).
map ([n. n * n], iota (8)).
map (fib, iota (8)).
map (#banana, iota (4)).

Echo "Testing combined list functions".
[l. append (l; reverse, l)] (6; iota).

slow-fact := [n. fold ([a, e. a * e], 1, n; iota)].
slow-fact (0).
slow-fact (1).
slow-fact (2).
slow-fact (5).

|* Test fold via sum, unfold via iota
100; iota; sum.
