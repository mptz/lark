Testing basic let expressions
form: let {x := fail} pass
norm: pass
======================================================================
form: let {x := pass} x
norm: pass
======================================================================
form: let {x := 1} 1
norm: 1
======================================================================
form: let {x := 1} x + x
norm: 2
======================================================================
form: let {x := 1. y := 2} x + y
norm: 3
======================================================================
form: let {id := [x. x]} id (pass)
norm: pass
======================================================================
Testing evaluation in let values
form: let {x := 1 + 1. y := 2 + 3} [x | y]
norm: [2 | 5]
======================================================================
form: let {p := [nil; $is-nil? pass | fail]} p
norm: pass
======================================================================
Testing unevaluable let values
form: let {x := foo + bar} x
norm: foo + bar
======================================================================
form: let {x := f (foo). y := g (bar)} x + y
norm: f (foo) + g (bar)
======================================================================
Testing nested lets
form: let {x := 1. y := 10} let {z := 100. w := 1000} x + z + y + w
norm: 1111
======================================================================
Testing let in various positions
form: [x. x - 1] (let {y := 9} y)
norm: 8
======================================================================
