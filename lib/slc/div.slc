; Non-recursive division.  Inspired by Oleg Kiselyov's integer division.
; Compared to Oleg's, my approach is functionalized; rather than use a
; flag to determine when iterative division is complete, I encode that
; information in the state transition function.
;
; This approach uses the dividend as a Church numeral, instead of using
; general recursion via a fixed-point combinator.  This approach is more
; consistent with the other arithmetic operations, and is not significantly
; slower than a Y combinator version, as most of the time is spend in the
; subtraction and comparison reductions during the actual division process.

; One iterative step of the division.  Parameterized by divisor; given
; the current state.  The state is a 3-triple whose first element is
; the transition function to be used to calculate the next step given
; the entire state, including the transition function.
;
; While dividing, state is (divide step function, subtrahend, accumulator).
; Equilibrium state is (identity function, remainder, quotient).
divstep	:= \d s. (\c a. (lt c d)				\
			(cons3 id c a)				\
			(cons3 (trip1 s) (sub c d) (succ a)))	\
		 (trip2 s) (trip3 s)

; Return a triple whose 2nd and 3rd values are remainder and quotient.
; Accomplished by applying DIVSTEP m times, where m is the dividend.
divcore	:= \m n. m (\s. (trip1 s) s) (cons3 (divstep n) m zero)

div	:= \m n. trip3 (divcore m n)
mod	:= \m n. trip2 (divcore m n)
divmod	:= \m n. (\t. cons (trip3 t) (trip2 t)) (divcore m n)
